#!/bin/bash
# pre-commit hook for Mory project
# Enforces branch strategy and runs quality checks

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Running pre-commit checks...${NC}"

# Get current branch name
CURRENT_BRANCH=$(git symbolic-ref --short HEAD 2>/dev/null || echo "detached")

# Check branch strategy compliance
echo -e "${BLUE}üìã Checking branch strategy...${NC}"

# Prevent direct commits to main branch
if [[ "$CURRENT_BRANCH" == "main" ]]; then
    echo -e "${RED}‚ùå Direct commits to main branch are not allowed!${NC}"
    echo -e "${YELLOW}Please create a feature branch and use Pull Request workflow:${NC}"
    echo -e "  git checkout -b feat/your-feature-name"
    echo -e "  git add ."
    echo -e "  git commit -m 'your message'"
    echo -e "  git push -u origin feat/your-feature-name"
    echo -e "  gh pr create"
    exit 1
fi

# Check branch naming convention
if [[ "$CURRENT_BRANCH" != "develop" ]]; then
    # Allow standard prefixes as defined in CLAUDE.md
    if [[ ! "$CURRENT_BRANCH" =~ ^(feat|fix|hotfix|docs|ci|test|refactor)/.+ ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Branch name doesn't follow convention:${NC}"
        echo -e "  Expected: feat/*, fix/*, hotfix/*, docs/*, ci/*, test/*, refactor/*"
        echo -e "  Current: $CURRENT_BRANCH"
        echo -e "${YELLOW}Continue anyway? [y/N]:${NC}"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            echo -e "${RED}‚ùå Commit cancelled by user${NC}"
            exit 1
        fi
    fi
fi

echo -e "${GREEN}‚úÖ Branch strategy check passed${NC}"

# Run quality checks
echo -e "${BLUE}üîß Running quality checks (make quality)...${NC}"

# Change to project root directory
PROJECT_ROOT=$(git rev-parse --show-toplevel)
cd "$PROJECT_ROOT"

# Check if make command exists
if ! command -v make &> /dev/null; then
    echo -e "${RED}‚ùå make command not found. Please install build-essential or equivalent${NC}"
    exit 1
fi

# Check if Makefile exists
if [[ ! -f "Makefile" ]]; then
    echo -e "${RED}‚ùå Makefile not found in project root${NC}"
    exit 1
fi

# Run quality checks
if ! make quality; then
    echo -e "${RED}‚ùå Quality checks failed!${NC}"
    echo -e "${YELLOW}Please fix the issues above before committing.${NC}"
    echo -e "${BLUE}Common fixes:${NC}"
    echo -e "  - Run 'make fmt' to fix formatting"
    echo -e "  - Run 'make lint' to see linting issues"
    echo -e "  - Run 'make test' to run tests"
    exit 1
fi

echo -e "${GREEN}‚úÖ Quality checks passed${NC}"

# Check for sensitive information
echo -e "${BLUE}üîê Checking for sensitive information...${NC}"

# Check for common sensitive patterns in staged files
STAGED_FILES=$(git diff --cached --name-only)

if [[ -n "$STAGED_FILES" ]]; then
    # Check for API keys, passwords, etc.
    SENSITIVE_PATTERNS=(
        "api[_-]?key.*=.*['\"][^'\"]{8,}"
        "password.*=.*['\"][^'\"]{4,}"
        "secret.*=.*['\"][^'\"]{8,}"
        "token.*=.*['\"][^'\"]{16,}"
        "aws[_-]?access[_-]?key"
        "aws[_-]?secret[_-]?key"
        "openai[_-]?api[_-]?key"
    )
    
    for pattern in "${SENSITIVE_PATTERNS[@]}"; do
        # Skip patterns found in comments or documentation
        if git diff --cached | grep -iE "$pattern" | grep -v "^[[:space:]]*#" | grep -v "echo.*pattern" > /dev/null; then
            echo -e "${RED}‚ùå Potential sensitive information detected!${NC}"
            echo -e "${YELLOW}Please review your changes and remove any API keys, passwords, or secrets${NC}"
            echo -e "${BLUE}If this is a false positive, you can skip this check with:${NC}"
            echo -e "  git commit --no-verify"
            exit 1
        fi
    done
fi

echo -e "${GREEN}‚úÖ Security check passed${NC}"

# Summary
echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"
echo -e "${BLUE}Commit details:${NC}"
echo -e "  Branch: $CURRENT_BRANCH"
echo -e "  Files: $(git diff --cached --name-only | wc -l) staged"
echo -e "${GREEN}Ready to commit!${NC}"

exit 0