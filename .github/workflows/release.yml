name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: make test
      
    - name: Build binaries for all platforms
      run: |
        mkdir -p dist
        
        # Build MCP server binaries for different platforms
        platforms=(
          "linux/amd64"
          "linux/arm64"
          "darwin/amd64"
          "darwin/arm64"
          "windows/amd64"
        )
        
        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          
          BINARY_NAME="mory"
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="mory.exe"
          fi
          
          echo "Building MCP server for $GOOS/$GOARCH..."
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags "-w -s -X main.version=${GITHUB_REF#refs/tags/} -X main.commit=${GITHUB_SHA::7}" \
            -o dist/${BINARY_NAME}-${GOOS}-${GOARCH} \
            ./cmd/mory
            
          # Create archive
          if [ "$GOOS" = "windows" ]; then
            cd dist && zip ${BINARY_NAME}-${GOOS}-${GOARCH}.zip ${BINARY_NAME}-${GOOS}-${GOARCH} && cd ..
          else
            cd dist && tar czf ${BINARY_NAME}-${GOOS}-${GOARCH}.tar.gz ${BINARY_NAME}-${GOOS}-${GOARCH} && cd ..
          fi
        done
        
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        # Set output for GitHub release
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat CHANGELOG.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/*.tar.gz
          dist/*.zip
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

