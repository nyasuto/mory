name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run tests
      run: make test
      
    - name: Run tests with coverage
      run: make test-coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ hashFiles('go.mod') }}-
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
        
    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: go.mod
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Build MCP server binary
      run: |
        mkdir -p bin
        CGO_ENABLED=0 go build -ldflags "-w -s" -o bin/mory ./cmd/mory
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mory-linux-amd64
        path: bin/
        retention-days: 7

  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "=== CI Pipeline Status ==="
        echo "Test job: ${{ needs.test.result }}"
        echo "Lint job: ${{ needs.lint.result }}"
        echo "Build job: ${{ needs.build.result }}"
        echo "=========================="
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ All CI jobs completed successfully!"
          exit 0
        else
          echo "❌ Some CI jobs failed or were cancelled"
          exit 1
        fi

