name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create cache key
      id: cache-key
      run: echo "cache-key=$(cat uv.lock | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: uv sync --frozen --extra dev
      
    - name: Run tests
      run: uv run pytest -v
      
    - name: Run tests with coverage
      run: uv run pytest --cov=app --cov-report=xml --cov-report=term
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Create cache key
      id: cache-key
      run: echo "cache-key=$(cat uv.lock | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ steps.cache-key.outputs.cache-key }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: uv sync --frozen --extra dev
      
    - name: Run ruff linter
      run: uv run ruff check .
      
    - name: Check code formatting
      run: uv run ruff format --check .
      
    - name: Run mypy type checking
      run: uv run mypy app/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: uv sync --frozen --extra dev
      
    - name: Run safety security scan
      run: uv run safety check --json || true
      continue-on-error: true

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: mory-server:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  ci-complete:
    name: CI Complete
    runs-on: ubuntu-latest
    needs: [test, lint, security, docker]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "=== CI Pipeline Status ==="
        echo "Test job: ${{ needs.test.result }}"
        echo "Lint job: ${{ needs.lint.result }}"
        echo "Security job: ${{ needs.security.result }}"
        echo "Docker job: ${{ needs.docker.result }}"
        echo "=========================="
        
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.lint.result }}" == "success" && "${{ needs.docker.result }}" == "success" ]]; then
          echo "✅ All CI jobs completed successfully!"
          echo "Note: Security scan status: ${{ needs.security.result }} (allowed to fail)"
          exit 0
        else
          echo "❌ Some CI jobs failed or were cancelled"
          exit 1
        fi

