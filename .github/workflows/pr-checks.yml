name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GO_VERSION: '1.21'

jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Validate PR title
      uses: amannn/action-semantic-pull-request@v5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        types: |
          feat
          fix
          docs
          style
          refactor
          test
          chore
        requireScope: false
        
    - name: Check for breaking changes
      run: |
        # Check if this is potentially a breaking change
        if git diff origin/main --name-only | grep -E "(internal/memory/types\.go|internal/mcp/server\.go)" > /dev/null; then
          echo "⚠️ This PR modifies core interfaces or types."
          echo "Please ensure backward compatibility or mark as breaking change."
        fi

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run quality checks
      run: make quality
      
    - name: Check test coverage
      id: coverage
      run: |
        make test-coverage
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        
        # Set minimum coverage threshold
        THRESHOLD=5.0
        if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
          echo "❌ Test coverage $COVERAGE% is below threshold $THRESHOLD%"
          exit 1
        else
          echo "✅ Test coverage $COVERAGE% meets threshold $THRESHOLD%"
        fi
        
    - name: Comment coverage on PR
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ steps.coverage.outputs.coverage }}';
          const threshold = '5.0';
          
          const body = `## 📊 Test Coverage Report
          
          Current coverage: **${coverage}%**
          Minimum threshold: **${threshold}%**
          
          ${parseFloat(coverage) >= parseFloat(threshold) ? '✅ Coverage meets requirements' : '❌ Coverage below threshold'}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build binary
      run: make build
      
    - name: Check binary size
      run: |
        SIZE=$(stat -c%s "bin/mory")
        SIZE_MB=$(echo "scale=2; $SIZE / 1024 / 1024" | bc)
        echo "Binary size: ${SIZE_MB} MB"
        
        # Set maximum size threshold (10MB)
        MAX_SIZE_MB=10
        if (( $(echo "$SIZE_MB > $MAX_SIZE_MB" | bc -l) )); then
          echo "❌ Binary size ${SIZE_MB}MB exceeds maximum ${MAX_SIZE_MB}MB"
          exit 1
        else
          echo "✅ Binary size ${SIZE_MB}MB is within limits"
        fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-3-Clause, BSD-2-Clause, ISC
        
    - name: Check for direct dependencies
      run: |
        echo "## Direct Dependencies" > deps.md
        go list -m -f '{{if not .Indirect}}{{.Path}} {{.Version}}{{end}}' all | grep -v "^$" >> deps.md
        
        echo "## Indirect Dependencies" >> deps.md
        go list -m -f '{{if .Indirect}}{{.Path}} {{.Version}}{{end}}' all | grep -v "^$" >> deps.md
        
        cat deps.md